@page "/salas/{Id:int}"

@using gabrieland.Client.Models
@inject HttpClient Http
@using gabrieland.Client.Components.OfertaSalas
@inject NavigationManager Navigation


<h3 class="header-sala">    
    <div class="breadcrumb center">
        <span class="clickable-text" @onclick="VolverAtras">Salas Disponibles</span>
        <a class="espace-bet"> > </a>
        <span>@sala?.Nombre</span>
    </div>
</h3>
<p class="top-text text-center">@sala?.Nombre</p>
<hr />
<div class="sala-detalle-container">
    @if (sala is null)
    {
        <p>Cargando sala...</p>
    }
    else
    {
        <div class="sala-info">
            <h3>Perfecta para: Eventos</h3>

            <p class="sala-descripcion">@sala.Descripcion</p>

            <div class="sala-caracteristicas">
                <div class="caracteristica">
                    <span class="icon">💳</span>
                    <span>Costo de reserva</span>
                    <strong>₡@sala.Precio por hora</strong>
                </div>
                <div class="caracteristica">
                    <span class="icon">👥</span>
                    <span>Capacidad</span>
                    <strong>@sala.Capacidad personas</strong>
                </div>
            </div>

            <div class="sala-botones">
                <button class="btn-azul" @onclick="OpenModal" >Ver Disponibilidad</button>
                <button class="btn-azul">Ver Servicios Adicionales</button>
            </div>
        </div>

        <div class="sala-galeria">
            @if (fotosSala is not null && fotosSala.Any())
            {
                <div class="sala-imagen-principal"
                     @onmouseenter="MostrarControles"
                     @onmouseleave="OcultarControles">
                    <img src="@imagenSeleccionada" alt="Imagen principal de @sala.Nombre" style="width: 100%; height: 100%; object-fit: cover;" />

                    @if (mostrarControles)
                    {
                        <button class="control-btn prev" @onclick="ImagenAnterior" style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); font-size: 2rem; background: rgba(0,0,0,0.3); color: white; border: none; cursor: pointer;">‹</button>
                        <button class="control-btn next" @onclick="ImagenSiguiente" style="position: absolute; top: 50%; right: 10px; transform: translateY(-50%); font-size: 2rem; background: rgba(0,0,0,0.3); color: white; border: none; cursor: pointer;">›</button>
                        <button class="control-btn play-pause" @onclick="ToggleAutoplay" style="position: absolute; bottom: 10px; right: 10px; background: rgba(0,0,0,0.3); color: white; border: none; cursor: pointer; padding: 0.3rem 0.6rem; font-size: 1.2rem;">
                            @(autoplay ? "⏸" : "▶")
                        </button>
                    }
                </div>

                <div class="sala-miniaturas">
                    @foreach (var foto in fotosSala)
                    {
                        var url = $"http://localhost:5027{foto.Foto}";
                        <img src="@url"
                            alt="Miniatura"
                            @onclick="() => CambiarImagen(url)"
                            class="miniatura @(imagenSeleccionada == url ? "miniatura-activa" : "")" />
                    }
                </div>

            }
            else
            {
                <img src="https://audiovisualesfader.com/wp-content/uploads/2022/03/cena-evento-presencial-sala-hotel-1024x683.png" alt="Imagen por defecto" />
            }
        </div>
    }
</div>

@if (showModalDisponibilidad)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <DisponibilidadModal Sala="sala" CloseIt="CloseModal" 
            notAvailableDatesD="notAvailableDates" 
            halfAvailableDatesD="halfAvailableDates"/>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private string? errorMessage;
    private Salas? sala;
    private List<FotoSala>? fotosSala;
    private string? imagenSeleccionada;
    private int indiceImagenActual = 0;
    private bool autoplay = true;
    private bool mostrarControles = false;
    private System.Timers.Timer? timer;
    private bool showModalDisponibilidad = false;
    private List<Reserva>? todasLasReservas;
    private List<Reserva> thisSalaReservations = new List<Reserva>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            sala = await GetSalaById(Id);
            fotosSala = await GetFotosBySalaId(Id);

            if (fotosSala is not null && fotosSala.Any())
            {
                indiceImagenActual = 0;
                imagenSeleccionada = $"http://localhost:5027{fotosSala[indiceImagenActual].Foto}";

                timer = new System.Timers.Timer(7000);
                timer.Elapsed += (sender, args) =>
                {
                    if (autoplay)
                    {
                        indiceImagenActual = (indiceImagenActual + 1) % fotosSala.Count;
                        imagenSeleccionada = $"http://localhost:5027{fotosSala[indiceImagenActual].Foto}";
                        InvokeAsync(StateHasChanged);
                    }
                };
                timer.Start();
            }

            await GetAllReservas();
            getSalaReservations();
            prepareDateLists();
        }
        catch (Exception ex)
        {
            errorMessage = "Error al obtener sala: " + ex.Message;
        }
    }

    private async Task<Salas?> GetSalaById(int id)
    {
        try
        {
            return await Http.GetFromJsonAsync<Salas>($"Salas/{id}");
        }
        catch (Exception ex)
        {
            errorMessage = "Error al obtener sala: " + ex.Message;
            return null;
        }
    }

    private async Task<List<FotoSala>?> GetFotosBySalaId(int id)
    {
        try
        {
            return await Http.GetFromJsonAsync<List<FotoSala>>($"Salas/Fotos/{id}");
        }
        catch (Exception ex)
        {
            errorMessage = "Error al obtener fotos: " + ex.Message;
            return null;
        }
    }

    private void OpenModal()
    {
        showModalDisponibilidad = true;
    }

    private void CloseModal()
    {
        showModalDisponibilidad = false;
    }

    private void CambiarImagen(string url)
    {
        imagenSeleccionada = url;
        indiceImagenActual = fotosSala!.FindIndex(f => $"http://localhost:5027{f.Foto}" == url);
    }

    private void VolverAtras()
    {
        Navigation.NavigateTo("/salas");
    }

    private void MostrarControles()
    {
        mostrarControles = true;
    }

    private void OcultarControles()
    {
        mostrarControles = false;
    }

    private void ImagenSiguiente()
    {
        if (fotosSala is null || fotosSala.Count == 0) return;

        indiceImagenActual = (indiceImagenActual + 1) % fotosSala.Count;
        imagenSeleccionada = $"http://localhost:5027{fotosSala[indiceImagenActual].Foto}";
    }

    private void ImagenAnterior()
    {
        if (fotosSala is null || fotosSala.Count == 0) return;

        indiceImagenActual = (indiceImagenActual - 1 + fotosSala.Count) % fotosSala.Count;
        imagenSeleccionada = $"http://localhost:5027{fotosSala[indiceImagenActual].Foto}";
    }

    private void ToggleAutoplay()
    {
        autoplay = !autoplay;
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task GetAllReservas()
    {
        try
        {
            var response = await Http.GetAsync("Reservas");
            if (response.IsSuccessStatusCode)
            {   
                Console.WriteLine("hi");
                todasLasReservas = await response.Content.ReadFromJsonAsync<List<Reserva>>();
            }
            else
            {   
                errorMessage = "Error al obtener las reservas";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void getSalaReservations(){
        if(todasLasReservas != null){
            Console.WriteLine("working");
            for(int i = 0; i < todasLasReservas.Count; i++){
                if(todasLasReservas[i].SAL_Id_Sala == sala.IdSala){
                    thisSalaReservations.Add(todasLasReservas[i]);
                }
            }
        }
    }

    private List<DateTime> notAvailableDates = new List<DateTime>();
    private List<FechaHoraBloqueadas> halfAvailableDates = new List<FechaHoraBloqueadas>();

    private void prepareDateLists()
    {
        List<Reserva> temp = new List<Reserva>();
        int i = 0;
        Console.WriteLine("idk");
        while(i < thisSalaReservations.Count)
        {
            DateTime day = thisSalaReservations[i].Fecha.Date;
            int repIndex = thisSalaReservations.FindIndex(i + 1, o => o.Fecha.Date == day.Date);
            Console.WriteLine(day);

            if(repIndex != -1)
            {
                notAvailableDates.Add(thisSalaReservations[i].Fecha.Date);
                thisSalaReservations.RemoveAt(repIndex);
                thisSalaReservations.RemoveAt(i);
                
            }
            else 
            {   
                temp.Add(thisSalaReservations[i]);
                i++;
            }
        }

        for(int j = 0; j < temp.Count; j++)
        {   
            if (temp[j].Duracion >= 8)
            {
                notAvailableDates.Add(temp[j].Fecha.Date);
                Console.WriteLine("una fecha fue mandada");
                Console.WriteLine(temp[j].Fecha.Date);
            } else 
            {
                int startHour = temp[j].Fecha.Hour;
                int endHour = startHour + temp[j].Duracion;

                FechaHoraBloqueadas newFechaHora = new FechaHoraBloqueadas();
                newFechaHora.Fecha = temp[j].Fecha.Date;
                Console.WriteLine(newFechaHora.Fecha);

                if(startHour <= 13)
                {
                    newFechaHora.bloquearDesde = 8;
                } 
                else 
                {
                    newFechaHora.bloquearDesde = startHour;
                }

                if(endHour > 18)
                {
                    newFechaHora.bloquearHasta = 24;
                } 
                else 
                {
                    newFechaHora.bloquearHasta = endHour + 2;
                }

                halfAvailableDates.Add(newFechaHora);
                Console.WriteLine(newFechaHora.Fecha);
                Console.WriteLine(newFechaHora.bloquearDesde);
                Console.WriteLine(newFechaHora.bloquearHasta);
            }
        }
    }
}
